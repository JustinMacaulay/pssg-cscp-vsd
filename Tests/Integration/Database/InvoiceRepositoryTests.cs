using Manager.Contract;
using Newtonsoft.Json;

public class InvoiceRepositoryTests(IInvoiceRepository repository)
{
    // WARNING!!! these are not reliable tests, they will fail, these were shortcuts I used for building a POC, these tests will need to be adjusted in order to be idempotent

    [Fact]
    public void Insert()
    {
        // Arrange
        var invoice = new Invoice();
        invoice.AuthorizationDate = DateTime.Now;
        invoice.CpuInvoiceType = CpuInvoiceType.OneTimePayment;
        invoice.CpuScheduledPaymentDate = DateTime.Now;
        invoice.CvapAuthorizationStatus = CvapAuthorizationStatus.ApprovedByQr;
        invoice.CvapInvoiceType = InvoiceType.OtherPayments;
        invoice.InvoiceDate = DateTime.Now;
        invoice.MethodOfPayment = MethodOfPayment.Cheque;
        invoice.Origin = Origin.AutoGenerated;
        invoice.PaymentAdviceComments = "Test";
        invoice.ProgramUnit = ProgramUnit.Cvap;
        invoice.StateCode = StateCode.Active;
        invoice.TaxExemption = TaxExemption.NoTax;
        invoice.OwnerId = TestData.OwnerId;
        invoice.CaseId = TestData.CaseId;

        invoice.Id = Guid.NewGuid();
        invoice.PayeeId = TestData.AccountId;
        invoice.PayeeLogicalName = Account.EntityLogicalName;
        invoice.EntitlementId = TestData.EntitlementId;
        invoice.CurrencyId = Constant.CadCurrency;
        invoice.CvapPaymentType = CvapPaymentType.PostAdjudication;
        invoice.StatusCode = InvoiceStatusCode.Submitted;
        invoice.CvapNumberOfLineItems = CvapNumberOfLineItems._1;
        invoice.CvapStobId = Constant.CvapStobId; //7902 - Entitlements
        invoice.ProcessId = Guid.Empty;
        invoice.ProvinceStateId = Constant.ProvinceBc;
        invoice.PaymentScheduleId = TestData.PaymentScheduleId;
        invoice.TaxExemption = TaxExemption.NoTax;

        invoice.InvoiceLineDetails = new List<InvoiceLineDetail>
        {
            new InvoiceLineDetail
            {
                AmountSimple = 100,
                Approved = YesNo.Yes,
                InvoiceType = InvoiceType.OtherPayments,
                OwnerId = invoice.OwnerId,
                StateCode = StateCode.Active,
                TaxExemption = TaxExemption.NoTax,
                CurrencyId = Constant.CadCurrency
            }
        };

        // Act
        var result = repository.Insert(invoice);

        // Assert
        Assert.True(result != Guid.Empty);
    }

    [Fact]
    public void Query()
    {
        // Arrange
        var command = new InvoiceQuery();

        // Act
        var result = repository.Query(command);

        var test = JsonConvert.SerializeObject(result.First());

        // Assert
        Assert.True(result.Count() > 0);
    }

    [Fact]
    public void Update()
    {
        // Arrange
        var invoice = new Invoice();

        // Act
        var result = repository.Update(invoice);

        // Assert
        //Assert.True(result != Guid.Empty);
    }
}
