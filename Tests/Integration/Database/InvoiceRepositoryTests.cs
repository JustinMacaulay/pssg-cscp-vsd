using Manager.Contract;
using Newtonsoft.Json;

public class InvoiceRepositoryTests(IInvoiceRepository repository)
{
    // WARNING!!! these are not reliable tests, they will fail, these were shortcuts I used for building a POC, these tests will need to be adjusted in order to be idempotent

    [Fact]
    public void Insert()
    {
        // Arrange
        var invoice = new Invoice();
        invoice.AuthorizationDate = DateTime.Now;
        invoice.CpuInvoiceType = CpuInvoiceType.OneTimePayment;
        invoice.CpuScheduledPaymentDate = DateTime.Now;
        invoice.CvapAuthorizationStatus = CvapAuthorizationStatus.ApprovedByQr;
        invoice.CvapInvoiceType = InvoiceType.OtherPayments;
        invoice.InvoiceDate = DateTime.Now;
        invoice.MethodOfPayment = MethodOfPayment.Cheque;
        invoice.Origin = Origin.AutoGenerated;
        invoice.PaymentAdviceComments = "Test";
        invoice.ProgramUnit = ProgramUnit.Cvap;
        invoice.StateCode = StateCode.Active;
        invoice.TaxExemption = TaxExemption.NoTax;
        invoice.OwnerId = new Guid("386c8d9c-0a4c-e911-b80c-00505683fbf4");
        invoice.CaseId = new Guid("7b1d36eb-0a3c-4893-b3db-0008d1316cfc");

        //invoice.Id = Guid.NewGuid();
        //invoice.PayeeId = paymentSchedule.PayeeId;
        //invoice.EntitlementId = paymentSchedule.EntitlementId;
        //invoice.CurrencyId = cadCurrency.Id;
        invoice.CvapPaymentType = CvapPaymentType.PostAdjudication; // 100000001
        invoice.StatusCode = InvoiceStatusCode.Submitted;
        invoice.CvapNumberOfLineItems = CvapNumberOfLineItems._1; //100000000 //1
        invoice.CvapStobId = Constant.CvapStobId; //7902 - Entitlements
        invoice.ProcessId = Guid.Empty;
        invoice.ProvinceStateId = Constant.ProvinceBc;
        //invoice.PaymentScheduleId = paymentSchedule.Id;
        //if (entitlement.TaxExemptFlag ?? false)
        //    invoice.TaxExemption = TaxExemption.NoTax;
        //else
        //    invoice.TaxExemption = TaxExemption.GstOnly;

        invoice.InvoiceLineDetails = new List<InvoiceLineDetail>
        {
            new InvoiceLineDetail
            {
                AmountSimple = 100,
                Approved = YesNo.Yes,
                InvoiceType = InvoiceType.OtherPayments,
                OwnerId = invoice.OwnerId,
                StateCode = StateCode.Active,
                TaxExemption = TaxExemption.NoTax,
                CurrencyId = Constant.CadCurrency
            }
        };

        // Act
        var result = repository.Insert(invoice);

        // Assert
        Assert.True(result != Guid.Empty);
    }

    [Fact]
    public void Query()
    {
        // Arrange
        var command = new InvoiceQuery();

        // Act
        var result = repository.Query(command);

        var test = JsonConvert.SerializeObject(result.First());

        // Assert
        Assert.True(result.Count() > 0);
    }

    [Fact]
    public void Update()
    {
        // Arrange
        var invoice = new Invoice();

        // Act
        var result = repository.Update(invoice);

        // Assert
        //Assert.True(result != Guid.Empty);
    }
}
